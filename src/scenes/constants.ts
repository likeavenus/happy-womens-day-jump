const createLabel = (scene, text) => {
  return scene.rexUI.add.label({
    width: 40, // Minimum width of round-rectangle
    height: 40, // Minimum height of round-rectangle

    background: scene.rexUI.add.roundRectangle(0, 0, 0, 0, 20, 0x5e92f3),

    text: scene.add.text(0, 0, text, {
      fontSize: "24px",
    }),
    name: text,
    space: {
      left: 10,
      right: 10,
      top: 10,
      bottom: 10,
    },
  });
};

export function getDialog(scene: Phaser.Scene) {
  let x = window.innerWidth / 2 - 270;
  let y = 600;
  const dialog = scene.rexUI.add
    .dialog({
      x: x,
      y: y,
      width: 500,

      background: scene.rexUI.add.roundRectangle(0, 0, 100, 100, 20, "gray"),

      title: createLabel(scene, "Title").setDraggable(),

      toolbar: [
        // createLabel(scene, 'O'),
        createLabel(scene, "X"),
      ],

      leftToolbar: [
        // createLabel(scene, 'A'),
        // createLabel(scene, 'B')
      ],

      content: createLabel(scene, "Content"),

      // description: createLabel(scene, 'Description'),

      choices: [
        // createLabel(scene, 'Choice0'),
        createLabel(scene, "Choice1"),
        createLabel(scene, "Choice2"),
      ],

      actions: [createLabel(scene, "Action0"), createLabel(scene, "Action1")],

      space: {
        left: 20,
        right: 20,
        top: -20,
        bottom: -20,

        title: 25,
        titleLeft: 30,
        content: 25,
        description: 25,
        descriptionLeft: 20,
        descriptionRight: 20,
        choices: 25,

        toolbarItem: 5,
        choice: 15,
        action: 15,
      },

      expand: {
        title: false,
        // content: false,
        // description: false,
        // choices: false,
        // actions: true,
      },

      align: {
        title: "center",
        // content: 'left',
        // description: 'left',
        // choices: 'left',
        actions: "right", // 'center'|'left'|'right'
      },

      click: {
        mode: "release",
      },
    })
    .setDraggable("background") // Draggable-background
    .layout()
    // .drawBounds(scene.add.graphics(), 0xff0000)
    // .popUp(1000)
    .hide()
    .setDepth(1);

  scene.print = scene.add.text(0, 0, "").setDepth(2);
  dialog
    .on("button.over", function (button, groupName, index, pointer, event) {
      button.getElement("background").setStrokeStyle(1, 0xffffff);
    })
    .on("button.out", function (button, groupName, index, pointer, event) {
      button.getElement("background").setStrokeStyle();
    });

  return dialog;
}

const defaultText =
  "–£—Ä–∞, —Ç—ã —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å! –û—Ç –≤—Å–µ–π –¥—É—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å 8 –º–∞—Ä—Ç–∞ –∏ —Ö–æ—Ç–∏–º –ø—Ä–µ–∑–µ–Ω—Ç–æ–≤–∞—Ç—å —Ç–µ–±–µ –Ω–µ–±–æ–ª—å—à—É—é –ø—Ä–∏—è—Ç–Ω–æ—Å—Ç—å ‚ù§Ô∏è –ù–∞–ø–∏—à–∏ –≤–æ–∂–∞–∫—É —Å—Ç–∞–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´–Ø –¥—É—Ä–µ—é —Å —ç—Ç–æ–π –ø—Ä–∏–∫–æ—Ä–º–∫–∏¬ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è üéÅ";
// export const greetings = {
//   savch: {
//     text: defaultText,
//   },
//   tanya: {
//     text: defaultText,
//   },
//   rusinya: {
//     text: defaultText,
//   },
//   masha: {
//     text: defaultText,
//   },
//   karina: {
//     text: defaultText,
//   },
//   natasha: {
//     text: defaultText,
//   },
//   shu: {
//     text: defaultText,
//   },
//   katya: {
//     text: defaultText,
//   },
//   vlada: {
//     text: defaultText,
//   },
//   ksusha: {
//     text: defaultText,
//   },
//   sashenka: {
//     text: defaultText,
//   },
//   alexandra: {
//     text: defaultText,
//   },
//   liza: {
//     text: defaultText,
//   },
// };

export const greetings = {
  ksenia: {
    text: "–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –≤–µ—Å–Ω—ã, –ö—Å—é—à–∞! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–ø–æ–ª–Ω–µ–Ω —è—Ä–∫–∏–º–∏ –∫—Ä–∞—Å–∫–∞–º–∏ —Ä–∞–¥–æ—Å—Ç–∏, —É—Å–ø–µ—Ö–æ–≤ –∏ –∑–¥–æ—Ä–æ–≤—å—è –≤–∞–º —Å –º–∞–ª—ã—à–∫–æ–π!",
  },
  nastya: {
    text: "–î–æ—Ä–æ–≥–∞—è –ù–∞—Å—Ç—è, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –≤–æ—Å—å–º—ã–º –º–∞—Ä—Ç–∞! –ü—É—Å—Ç—å —Ç–≤–æ–∏ —Ç–∞–ª–∞–Ω—Ç—ã –≤—Å–µ–≥–¥–∞ –Ω–∞—Ö–æ–¥—è—Ç –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ, –∞ –∂–∏–∑–Ω—å –±—å—ë—Ç –∫–ª—é—á–æ–º!",
  },
  anna: {
    text: "–°—á–∞—Å—Ç—å—è, —É–ª—ã–±–æ–∫ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è —Ç–µ–±–µ, –ê–Ω—è! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –∞ –∏–≥—Ä—ã –Ω–µ –ø–µ—Ä–µ—Å—Ç–∞—é—Ç —Ä–∞–¥–æ–≤–∞—Ç—å!",
  },
  elena: {
    text: "–° –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–º –≤–µ—Å–Ω—ã, –º–∏–ª–∞—è –õ–µ–Ω–∞! –ü—É—Å—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –∏ —É–º–µ–Ω–∏–µ –Ω–∞—Ö–æ–¥–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥!",
  },
  nataliaV: {
    text: "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤–∞—Å —Å 8 –º–∞—Ä—Ç–∞, –¥–æ—Ä–æ–≥–∞—è –ù–∞—Ç–∞—à–∞! –ü—É—Å—Ç—å —Ç–≤–æ–π —Ç—Ä—É–¥ –≤—Å–µ–≥–¥–∞ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç—Å—è –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –∑–∞—Å–ª—É–∂–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã! –ò —Å—á–∞—Å—Ç—å—è –≤ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω–∏!",
  },
  nataliaP: {
    text: "–°–≤–µ—Ç–ª—ã—Ö —ç–º–æ—Ü–∏–π, —Ç–µ–ø–ª–∞ –∏ —Ä–∞–¥–æ—Å—Ç–∏ —Ç–µ–±–µ, –ù–∞—Ç–∞—à–∞! –ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ —Ç–≤–æ–µ–π –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏!",
  },
};

export enum COLLISION_CATEGORIES {
  Disabled = 0,
  Platform = 1,
  Player = 2,
  Coin = 8,
  // LeftArm = 8,
  // Vulture = 16,
  // Vases = 32,
}
